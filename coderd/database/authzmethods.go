// Code generated by authzmethods; DO NOT EDIT.
// Functions generated in this file will not conflict with
// methods in database/authzmethods.go. If you believe there is
// an error in a method, write it manually there and regenerate this file.
package database

import (
	"context"
	"time"

	"github.com/coder/coder/coderd/rbac"
	"github.com/google/uuid"
)

var _ Store = (*AuthzQuerier)(nil)

func (q *AuthzQuerier) AcquireProvisionerJob(ctx context.Context, arg AcquireProvisionerJobParams) (ProvisionerJob, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) DeleteAPIKeyByID(ctx context.Context, arg string) error {
	panic("not implemented")
}

func (q *AuthzQuerier) DeleteAPIKeysByUserID(ctx context.Context, arg uuid.UUID) error {
	panic("not implemented")
}

func (q *AuthzQuerier) DeleteGitSSHKey(ctx context.Context, arg uuid.UUID) error {
	panic("not implemented")
}

func (q *AuthzQuerier) DeleteGroupByID(ctx context.Context, arg uuid.UUID) error {
	panic("not implemented")
}

func (q *AuthzQuerier) DeleteGroupMember(ctx context.Context, arg uuid.UUID) error {
	panic("not implemented")
}

func (q *AuthzQuerier) DeleteLicense(ctx context.Context, arg int32) (int32, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) DeleteOldAgentStats(ctx context.Context) error {
	panic("not implemented")
}

func (q *AuthzQuerier) DeleteParameterValueByID(ctx context.Context, arg uuid.UUID) error {
	panic("not implemented")
}

func (q *AuthzQuerier) DeleteReplicasUpdatedBefore(ctx context.Context, arg time.Time) error {
	panic("not implemented")
}

func (q *AuthzQuerier) GetAPIKeyByID(ctx context.Context, arg string) (APIKey, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetAPIKeysByLoginType(ctx context.Context, arg LoginType) ([]APIKey, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetAPIKeysLastUsedAfter(ctx context.Context, arg time.Time) ([]APIKey, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetActiveUserCount(ctx context.Context) (int64, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetAllOrganizationMembers(ctx context.Context, arg uuid.UUID) ([]User, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetAuditLogsOffset(ctx context.Context, arg GetAuditLogsOffsetParams) ([]GetAuditLogsOffsetRow, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetAuthorizationUserRoles(ctx context.Context, arg uuid.UUID) (GetAuthorizationUserRolesRow, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetAuthorizedTemplates(ctx context.Context, arg GetTemplatesWithFilterParams, arg1 rbac.PreparedAuthorized) ([]Template, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetAuthorizedUserCount(ctx context.Context, arg GetFilteredUserCountParams, arg1 rbac.PreparedAuthorized) (int64, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetAuthorizedWorkspaces(ctx context.Context, arg GetWorkspacesParams, arg1 rbac.PreparedAuthorized) ([]GetWorkspacesRow, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetDERPMeshKey(ctx context.Context) (string, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetDeploymentID(ctx context.Context) (string, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetFileByHashAndCreator(ctx context.Context, arg GetFileByHashAndCreatorParams) (File, error) {
	return authorizedFetch(q.authorizer, rbac.ActionRead, q.database.GetFileByHashAndCreator)(ctx, arg)
}

func (q *AuthzQuerier) GetFileByID(ctx context.Context, arg uuid.UUID) (File, error) {
	return authorizedFetch(q.authorizer, rbac.ActionRead, q.database.GetFileByID)(ctx, arg)
}

func (q *AuthzQuerier) GetFilteredUserCount(ctx context.Context, arg GetFilteredUserCountParams) (int64, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetGitAuthLink(ctx context.Context, arg GetGitAuthLinkParams) (GitAuthLink, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetGitSSHKey(ctx context.Context, arg uuid.UUID) (GitSSHKey, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetGroupByID(ctx context.Context, arg uuid.UUID) (Group, error) {
	return authorizedFetch(q.authorizer, rbac.ActionRead, q.database.GetGroupByID)(ctx, arg)
}

func (q *AuthzQuerier) GetGroupByOrgAndName(ctx context.Context, arg GetGroupByOrgAndNameParams) (Group, error) {
	return authorizedFetch(q.authorizer, rbac.ActionRead, q.database.GetGroupByOrgAndName)(ctx, arg)
}

func (q *AuthzQuerier) GetGroupMembers(ctx context.Context, arg uuid.UUID) ([]User, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetGroupsByOrganizationID(ctx context.Context, arg uuid.UUID) ([]Group, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetLastUpdateCheck(ctx context.Context) (string, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetLatestAgentStat(ctx context.Context, arg uuid.UUID) (AgentStat, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetLatestWorkspaceBuildByWorkspaceID(ctx context.Context, arg uuid.UUID) (WorkspaceBuild, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetLatestWorkspaceBuilds(ctx context.Context) ([]WorkspaceBuild, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetLatestWorkspaceBuildsByWorkspaceIDs(ctx context.Context, arg []uuid.UUID) ([]WorkspaceBuild, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetLicenses(ctx context.Context) ([]License, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetLogoURL(ctx context.Context) (string, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetOrganizationByID(ctx context.Context, arg uuid.UUID) (Organization, error) {
	return authorizedFetch(q.authorizer, rbac.ActionRead, q.database.GetOrganizationByID)(ctx, arg)
}

func (q *AuthzQuerier) GetOrganizationByName(ctx context.Context, arg string) (Organization, error) {
	return authorizedFetch(q.authorizer, rbac.ActionRead, q.database.GetOrganizationByName)(ctx, arg)
}

func (q *AuthzQuerier) GetOrganizationIDsByMemberIDs(ctx context.Context, arg []uuid.UUID) ([]GetOrganizationIDsByMemberIDsRow, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetOrganizationMemberByUserID(ctx context.Context, arg GetOrganizationMemberByUserIDParams) (OrganizationMember, error) {
	return authorizedFetch(q.authorizer, rbac.ActionRead, q.database.GetOrganizationMemberByUserID)(ctx, arg)
}

func (q *AuthzQuerier) GetOrganizationMembershipsByUserID(ctx context.Context, arg uuid.UUID) ([]OrganizationMember, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetOrganizations(ctx context.Context) ([]Organization, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetOrganizationsByUserID(ctx context.Context, arg uuid.UUID) ([]Organization, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetParameterSchemasByJobID(ctx context.Context, arg uuid.UUID) ([]ParameterSchema, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetParameterSchemasCreatedAfter(ctx context.Context, arg time.Time) ([]ParameterSchema, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetParameterValueByScopeAndName(ctx context.Context, arg GetParameterValueByScopeAndNameParams) (ParameterValue, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetPreviousTemplateVersion(ctx context.Context, arg GetPreviousTemplateVersionParams) (TemplateVersion, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetProvisionerDaemonByID(ctx context.Context, arg uuid.UUID) (ProvisionerDaemon, error) {
	return authorizedFetch(q.authorizer, rbac.ActionRead, q.database.GetProvisionerDaemonByID)(ctx, arg)
}

func (q *AuthzQuerier) GetProvisionerDaemons(ctx context.Context) ([]ProvisionerDaemon, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetProvisionerJobByID(ctx context.Context, arg uuid.UUID) (ProvisionerJob, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetProvisionerJobsByIDs(ctx context.Context, arg []uuid.UUID) ([]ProvisionerJob, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetProvisionerJobsCreatedAfter(ctx context.Context, arg time.Time) ([]ProvisionerJob, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetProvisionerLogsByIDBetween(ctx context.Context, arg GetProvisionerLogsByIDBetweenParams) ([]ProvisionerJobLog, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetQuotaAllowanceForUser(ctx context.Context, arg uuid.UUID) (int64, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetQuotaConsumedForUser(ctx context.Context, arg uuid.UUID) (int64, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetReplicasUpdatedAfter(ctx context.Context, arg time.Time) ([]Replica, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetServiceBanner(ctx context.Context) (string, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetTemplateAverageBuildTime(ctx context.Context, arg GetTemplateAverageBuildTimeParams) (GetTemplateAverageBuildTimeRow, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetTemplateByID(ctx context.Context, arg uuid.UUID) (Template, error) {
	return authorizedFetch(q.authorizer, rbac.ActionRead, q.database.GetTemplateByID)(ctx, arg)
}

func (q *AuthzQuerier) GetTemplateByOrganizationAndName(ctx context.Context, arg GetTemplateByOrganizationAndNameParams) (Template, error) {
	return authorizedFetch(q.authorizer, rbac.ActionRead, q.database.GetTemplateByOrganizationAndName)(ctx, arg)
}

func (q *AuthzQuerier) GetTemplateDAUs(ctx context.Context, arg uuid.UUID) ([]GetTemplateDAUsRow, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetTemplateGroupRoles(ctx context.Context, arg uuid.UUID) ([]TemplateGroup, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetTemplateUserRoles(ctx context.Context, arg uuid.UUID) ([]TemplateUser, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetTemplateVersionByID(ctx context.Context, arg uuid.UUID) (TemplateVersion, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetTemplateVersionByJobID(ctx context.Context, arg uuid.UUID) (TemplateVersion, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetTemplateVersionByOrganizationAndName(ctx context.Context, arg GetTemplateVersionByOrganizationAndNameParams) (TemplateVersion, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetTemplateVersionByTemplateIDAndName(ctx context.Context, arg GetTemplateVersionByTemplateIDAndNameParams) (TemplateVersion, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetTemplateVersionsByIDs(ctx context.Context, arg []uuid.UUID) ([]TemplateVersion, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetTemplateVersionsByTemplateID(ctx context.Context, arg GetTemplateVersionsByTemplateIDParams) ([]TemplateVersion, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetTemplateVersionsCreatedAfter(ctx context.Context, arg time.Time) ([]TemplateVersion, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetTemplates(ctx context.Context) ([]Template, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetTemplatesWithFilter(ctx context.Context, arg GetTemplatesWithFilterParams) ([]Template, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetUnexpiredLicenses(ctx context.Context) ([]License, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetUserByEmailOrUsername(ctx context.Context, arg GetUserByEmailOrUsernameParams) (User, error) {
	return authorizedFetch(q.authorizer, rbac.ActionRead, q.database.GetUserByEmailOrUsername)(ctx, arg)
}

func (q *AuthzQuerier) GetUserByID(ctx context.Context, arg uuid.UUID) (User, error) {
	return authorizedFetch(q.authorizer, rbac.ActionRead, q.database.GetUserByID)(ctx, arg)
}

func (q *AuthzQuerier) GetUserCount(ctx context.Context) (int64, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetUserGroups(ctx context.Context, arg uuid.UUID) ([]Group, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetUserLinkByLinkedID(ctx context.Context, arg string) (UserLink, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetUserLinkByUserIDLoginType(ctx context.Context, arg GetUserLinkByUserIDLoginTypeParams) (UserLink, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetUsers(ctx context.Context, arg GetUsersParams) ([]GetUsersRow, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetUsersByIDs(ctx context.Context, arg []uuid.UUID) ([]User, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceAgentByAuthToken(ctx context.Context, arg uuid.UUID) (WorkspaceAgent, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceAgentByID(ctx context.Context, arg uuid.UUID) (WorkspaceAgent, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceAgentByInstanceID(ctx context.Context, arg string) (WorkspaceAgent, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceAgentsByResourceIDs(ctx context.Context, arg []uuid.UUID) ([]WorkspaceAgent, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceAgentsCreatedAfter(ctx context.Context, arg time.Time) ([]WorkspaceAgent, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceAppByAgentIDAndSlug(ctx context.Context, arg GetWorkspaceAppByAgentIDAndSlugParams) (WorkspaceApp, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceAppsByAgentID(ctx context.Context, arg uuid.UUID) ([]WorkspaceApp, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceAppsByAgentIDs(ctx context.Context, arg []uuid.UUID) ([]WorkspaceApp, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceAppsCreatedAfter(ctx context.Context, arg time.Time) ([]WorkspaceApp, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceBuildByID(ctx context.Context, arg uuid.UUID) (WorkspaceBuild, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceBuildByJobID(ctx context.Context, arg uuid.UUID) (WorkspaceBuild, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceBuildByWorkspaceIDAndBuildNumber(ctx context.Context, arg GetWorkspaceBuildByWorkspaceIDAndBuildNumberParams) (WorkspaceBuild, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceBuildsByWorkspaceID(ctx context.Context, arg GetWorkspaceBuildsByWorkspaceIDParams) ([]WorkspaceBuild, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceBuildsCreatedAfter(ctx context.Context, arg time.Time) ([]WorkspaceBuild, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceByAgentID(ctx context.Context, arg uuid.UUID) (Workspace, error) {
	return authorizedFetch(q.authorizer, rbac.ActionRead, q.database.GetWorkspaceByAgentID)(ctx, arg)
}

func (q *AuthzQuerier) GetWorkspaceByID(ctx context.Context, arg uuid.UUID) (Workspace, error) {
	return authorizedFetch(q.authorizer, rbac.ActionRead, q.database.GetWorkspaceByID)(ctx, arg)
}

func (q *AuthzQuerier) GetWorkspaceByOwnerIDAndName(ctx context.Context, arg GetWorkspaceByOwnerIDAndNameParams) (Workspace, error) {
	return authorizedFetch(q.authorizer, rbac.ActionRead, q.database.GetWorkspaceByOwnerIDAndName)(ctx, arg)
}

func (q *AuthzQuerier) GetWorkspaceCountByUserID(ctx context.Context, arg uuid.UUID) (int64, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceOwnerCountsByTemplateIDs(ctx context.Context, arg []uuid.UUID) ([]GetWorkspaceOwnerCountsByTemplateIDsRow, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceResourceByID(ctx context.Context, arg uuid.UUID) (WorkspaceResource, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceResourceMetadataByResourceIDs(ctx context.Context, arg []uuid.UUID) ([]WorkspaceResourceMetadatum, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceResourceMetadataCreatedAfter(ctx context.Context, arg time.Time) ([]WorkspaceResourceMetadatum, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceResourcesByJobID(ctx context.Context, arg uuid.UUID) ([]WorkspaceResource, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceResourcesByJobIDs(ctx context.Context, arg []uuid.UUID) ([]WorkspaceResource, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaceResourcesCreatedAfter(ctx context.Context, arg time.Time) ([]WorkspaceResource, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) GetWorkspaces(ctx context.Context, arg GetWorkspacesParams) ([]GetWorkspacesRow, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertAPIKey(ctx context.Context, arg InsertAPIKeyParams) (APIKey, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertAgentStat(ctx context.Context, arg InsertAgentStatParams) (AgentStat, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertAllUsersGroup(ctx context.Context, arg uuid.UUID) (Group, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertAuditLog(ctx context.Context, arg InsertAuditLogParams) (AuditLog, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertDERPMeshKey(ctx context.Context, arg string) error {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertDeploymentID(ctx context.Context, arg string) error {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertFile(ctx context.Context, arg InsertFileParams) (File, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertGitAuthLink(ctx context.Context, arg InsertGitAuthLinkParams) (GitAuthLink, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertGitSSHKey(ctx context.Context, arg InsertGitSSHKeyParams) (GitSSHKey, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertGroup(ctx context.Context, arg InsertGroupParams) (Group, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertGroupMember(ctx context.Context, arg InsertGroupMemberParams) error {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertLicense(ctx context.Context, arg InsertLicenseParams) (License, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertOrUpdateLastUpdateCheck(ctx context.Context, arg string) error {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertOrUpdateLogoURL(ctx context.Context, arg string) error {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertOrUpdateServiceBanner(ctx context.Context, arg string) error {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertOrganization(ctx context.Context, arg InsertOrganizationParams) (Organization, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertOrganizationMember(ctx context.Context, arg InsertOrganizationMemberParams) (OrganizationMember, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertParameterSchema(ctx context.Context, arg InsertParameterSchemaParams) (ParameterSchema, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertParameterValue(ctx context.Context, arg InsertParameterValueParams) (ParameterValue, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertProvisionerDaemon(ctx context.Context, arg InsertProvisionerDaemonParams) (ProvisionerDaemon, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertProvisionerJob(ctx context.Context, arg InsertProvisionerJobParams) (ProvisionerJob, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertProvisionerJobLogs(ctx context.Context, arg InsertProvisionerJobLogsParams) ([]ProvisionerJobLog, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertReplica(ctx context.Context, arg InsertReplicaParams) (Replica, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertTemplate(ctx context.Context, arg InsertTemplateParams) (Template, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertTemplateVersion(ctx context.Context, arg InsertTemplateVersionParams) (TemplateVersion, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertUserLink(ctx context.Context, arg InsertUserLinkParams) (UserLink, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertWorkspace(ctx context.Context, arg InsertWorkspaceParams) (Workspace, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertWorkspaceAgent(ctx context.Context, arg InsertWorkspaceAgentParams) (WorkspaceAgent, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertWorkspaceApp(ctx context.Context, arg InsertWorkspaceAppParams) (WorkspaceApp, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertWorkspaceBuild(ctx context.Context, arg InsertWorkspaceBuildParams) (WorkspaceBuild, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertWorkspaceResource(ctx context.Context, arg InsertWorkspaceResourceParams) (WorkspaceResource, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) InsertWorkspaceResourceMetadata(ctx context.Context, arg InsertWorkspaceResourceMetadataParams) ([]WorkspaceResourceMetadatum, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) ParameterValue(ctx context.Context, arg uuid.UUID) (ParameterValue, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) ParameterValues(ctx context.Context, arg ParameterValuesParams) ([]ParameterValue, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateAPIKeyByID(ctx context.Context, arg UpdateAPIKeyByIDParams) error {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateGitAuthLink(ctx context.Context, arg UpdateGitAuthLinkParams) error {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateGitSSHKey(ctx context.Context, arg UpdateGitSSHKeyParams) (GitSSHKey, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateGroupByID(ctx context.Context, arg UpdateGroupByIDParams) (Group, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateMemberRoles(ctx context.Context, arg UpdateMemberRolesParams) (OrganizationMember, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateProvisionerDaemonByID(ctx context.Context, arg UpdateProvisionerDaemonByIDParams) error {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateProvisionerJobByID(ctx context.Context, arg UpdateProvisionerJobByIDParams) error {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateProvisionerJobWithCancelByID(ctx context.Context, arg UpdateProvisionerJobWithCancelByIDParams) error {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateProvisionerJobWithCompleteByID(ctx context.Context, arg UpdateProvisionerJobWithCompleteByIDParams) error {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateReplica(ctx context.Context, arg UpdateReplicaParams) (Replica, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateTemplateACLByID(ctx context.Context, arg UpdateTemplateACLByIDParams) (Template, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateTemplateActiveVersionByID(ctx context.Context, arg UpdateTemplateActiveVersionByIDParams) error {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateTemplateDeletedByID(ctx context.Context, arg UpdateTemplateDeletedByIDParams) error {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateTemplateMetaByID(ctx context.Context, arg UpdateTemplateMetaByIDParams) (Template, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateTemplateVersionByID(ctx context.Context, arg UpdateTemplateVersionByIDParams) error {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateTemplateVersionDescriptionByJobID(ctx context.Context, arg UpdateTemplateVersionDescriptionByJobIDParams) error {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateUserDeletedByID(ctx context.Context, arg UpdateUserDeletedByIDParams) error {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateUserHashedPassword(ctx context.Context, arg UpdateUserHashedPasswordParams) error {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateUserLastSeenAt(ctx context.Context, arg UpdateUserLastSeenAtParams) (User, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateUserLink(ctx context.Context, arg UpdateUserLinkParams) (UserLink, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateUserLinkedID(ctx context.Context, arg UpdateUserLinkedIDParams) (UserLink, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (User, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateUserRoles(ctx context.Context, arg UpdateUserRolesParams) (User, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) (User, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateWorkspace(ctx context.Context, arg UpdateWorkspaceParams) (Workspace, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateWorkspaceAgentConnectionByID(ctx context.Context, arg UpdateWorkspaceAgentConnectionByIDParams) error {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateWorkspaceAgentVersionByID(ctx context.Context, arg UpdateWorkspaceAgentVersionByIDParams) error {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateWorkspaceAppHealthByID(ctx context.Context, arg UpdateWorkspaceAppHealthByIDParams) error {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateWorkspaceAutostart(ctx context.Context, arg UpdateWorkspaceAutostartParams) error {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateWorkspaceBuildByID(ctx context.Context, arg UpdateWorkspaceBuildByIDParams) (WorkspaceBuild, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateWorkspaceBuildCostByID(ctx context.Context, arg UpdateWorkspaceBuildCostByIDParams) (WorkspaceBuild, error) {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateWorkspaceDeletedByID(ctx context.Context, arg UpdateWorkspaceDeletedByIDParams) error {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateWorkspaceLastUsedAt(ctx context.Context, arg UpdateWorkspaceLastUsedAtParams) error {
	panic("not implemented")
}

func (q *AuthzQuerier) UpdateWorkspaceTTL(ctx context.Context, arg UpdateWorkspaceTTLParams) error {
	panic("not implemented")
}
