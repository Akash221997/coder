// Code generated by go generate; DO NOT EDIT.
// This file was generated by the script at scripts/deploymentconfig/main.go
// The data for populating this file is from codersdk..
package deployment

import (
	"flag"
	"os"
	"path/filepath"
	"time"

	"github.com/coreos/go-oidc/v3/oidc"
	"github.com/spf13/pflag"
	"github.com/spf13/viper"

	"github.com/coder/coder/cli/cliui"
	"github.com/coder/coder/codersdk"
)

func Config(vip *viper.Viper) (codersdk.DeploymentConfig, error) {
	cfg := codersdk.DeploymentConfig{}
	return cfg, vip.Unmarshal(cfg)
}

func DefaultViper() *viper.Viper {
	v := viper.New()
	v.SetEnvPrefix("coder")
	v.AutomaticEnv()
	v.SetDefault("address", "127.0.0.1:3000")
	v.SetDefault("autobuild_poll_interval", time.Minute)
	v.SetDefault("derp.server.enabled", true)
	v.SetDefault("derp.server.region_id", 999)
	v.SetDefault("derp.server.region_code", "coder")
	v.SetDefault("derp.server.region_name", "Coder Embedded Relay")
	v.SetDefault("derp.server.stun_address", []string{"stun.l.google.com:19302"})
	v.SetDefault("prometheus.address", "127.0.0.1:2112")
	v.SetDefault("pprof.address", "127.0.0.1:6060")
	v.SetDefault("cache_dir", defaultCacheDir())
	v.SetDefault("provisioner_daemon_count", 3)
	v.SetDefault("oidc.allow_signups", true)
	v.SetDefault("oidc.scopes", []string{oidc.ScopeOpenID, "profile", "email"})
	v.SetDefault("telemetry.enable", flag.Lookup("test.v") == nil)
	v.SetDefault("telemetry.trace_enable", flag.Lookup("test.v") == nil)
	v.SetDefault("telemetry.url", "https://telemetry.coder.com")
	v.SetDefault("tls_config.tls_min_version", "tls12")
	v.SetDefault("ssh_keygen_algorithm", "ed25519")
	v.SetDefault("metrics_cache_refresh_interval", time.Hour)
	v.SetDefault("agent_stat_refresh_interval", 10 * time.Minute)
	v.SetDefault("audit_logging", true)

	return v
}

func AttachFlags(flagset *pflag.FlagSet, vip *viper.Viper) {
	_ = flagset.StringP("access-url", "", vip.GetString("access_url"), `External URL to access your deployment. This must be accessible by all provisioned workspaces.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_ACCESS_URL"))
	_ = vip.BindPFlag("access_url", flagset.Lookup("access-url"))
	_ = flagset.StringP("wildcard-access-url", "", vip.GetString("wildcard_access_url"), `Specifies the wildcard hostname to use for workspace applications in the form "*.example.com".`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_WILDCARD_ACCESS_URL"))
	_ = vip.BindPFlag("wildcard_access_url", flagset.Lookup("wildcard-access-url"))
	_ = flagset.StringP("address", "a", vip.GetString("address"), `Bind address of the server.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_ADDRESS"))
	_ = vip.BindPFlag("address", flagset.Lookup("address"))
	_ = flagset.DurationP("autobuild-poll-interval", "", vip.GetDuration("autobuild_poll_interval"), `Interval to poll for scheduled workspace builds.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_AUTOBUILD_POLL_INTERVAL"))
	_ = vip.BindPFlag("autobuild_poll_interval", flagset.Lookup("autobuild-poll-interval"))
	_ = flagset.MarkHidden("autobuild-poll-interval")
	_ = flagset.BoolP("derp-server-enable", "", vip.GetBool("derp.server.enabled"), `Whether to enable or disable the embedded DERP relay server.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_DERP.SERVER.ENABLED"))
	_ = vip.BindPFlag("derp.server.enabled", flagset.Lookup("derp-server-enable"))
	_ = flagset.IntP("derp-server-region-id", "", vip.GetInt("derp.server.region_id"), `Region ID to use for the embedded DERP server.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_DERP.SERVER.REGION_ID"))
	_ = vip.BindPFlag("derp.server.region_id", flagset.Lookup("derp-server-region-id"))
	_ = flagset.StringP("derp-server-region-code", "", vip.GetString("derp.server.region_code"), `Region code to use for the embedded DERP server.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_DERP.SERVER.REGION_CODE"))
	_ = vip.BindPFlag("derp.server.region_code", flagset.Lookup("derp-server-region-code"))
	_ = flagset.StringP("derp-server-region-name", "", vip.GetString("derp.server.region_name"), `Region name that for the embedded DERP server.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_DERP.SERVER.REGION_NAME"))
	_ = vip.BindPFlag("derp.server.region_name", flagset.Lookup("derp-server-region-name"))
	_ = flagset.StringArrayP("derp-server-stun-addresses", "", vip.GetStringSlice("derp.server.stun_address"), `Addresses for STUN servers to establish P2P connections. Set empty to disable P2P connections.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_DERP.SERVER.STUN_ADDRESS"))
	_ = vip.BindPFlag("derp.server.stun_address", flagset.Lookup("derp-server-stun-addresses"))
	_ = flagset.StringP("derp-config-url", "", vip.GetString("derp.config.url"), `URL to fetch a DERP mapping on startup. See: https://tailscale.com/kb/1118/custom-derp-servers/`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_DERP.CONFIG.URL"))
	_ = vip.BindPFlag("derp.config.url", flagset.Lookup("derp-config-url"))
	_ = flagset.StringP("derp-config-path", "", vip.GetString("derp.config.path"), `Path to read a DERP mapping from. See: https://tailscale.com/kb/1118/custom-derp-servers/`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_DERP.CONFIG.PATH"))
	_ = vip.BindPFlag("derp.config.path", flagset.Lookup("derp-config-path"))
	_ = flagset.BoolP("prometheus-enable", "", vip.GetBool("prometheus.enabled"), `Serve prometheus metrics on the address defined by prometheus address.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_PROMETHEUS.ENABLED"))
	_ = vip.BindPFlag("prometheus.enabled", flagset.Lookup("prometheus-enable"))
	_ = flagset.StringP("prometheus-address", "", vip.GetString("prometheus.address"), `The bind address to serve prometheus metrics.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_PROMETHEUS.ADDRESS"))
	_ = vip.BindPFlag("prometheus.address", flagset.Lookup("prometheus-address"))
	_ = flagset.BoolP("pprof-enable", "", vip.GetBool("pprof.enabled"), `Serve pprof metrics on the address defined by pprof address.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_PPROF.ENABLED"))
	_ = vip.BindPFlag("pprof.enabled", flagset.Lookup("pprof-enable"))
	_ = flagset.StringP("pprof-address", "", vip.GetString("pprof.address"), `The bind address to serve pprof.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_PPROF.ADDRESS"))
	_ = vip.BindPFlag("pprof.address", flagset.Lookup("pprof-address"))
	_ = flagset.StringP("cache-dir", "", vip.GetString("cache_dir"), `The directory to cache temporary files. If unspecified and $CACHE_DIRECTORY is set, it will be used for compatibility with systemd.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_CACHE_DIR"))
	_ = vip.BindPFlag("cache_dir", flagset.Lookup("cache-dir"))
	_ = flagset.BoolP("in-memory", "", vip.GetBool("in_memory_database"), `Controls whether data will be stored in an in-memory database.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_IN_MEMORY_DATABASE"))
	_ = vip.BindPFlag("in_memory_database", flagset.Lookup("in-memory"))
	_ = flagset.MarkHidden("in-memory")
	_ = flagset.IntP("provisioner-daemons", "", vip.GetInt("provisioner_daemon_count"), `Number of provisioner daemons to create on start. If builds are stuck in queued state for a long time, consider increasing this.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_PROVISIONER_DAEMON_COUNT"))
	_ = vip.BindPFlag("provisioner_daemon_count", flagset.Lookup("provisioner-daemons"))
	_ = flagset.StringP("postgres-url", "", vip.GetString("postgres_url"), `URL of a PostgreSQL database. If empty, PostgreSQL binaries will be downloaded from Maven (https://repo1.maven.org/maven2) and store all data in the config root. Access the built-in database with "coder server postgres-builtin-url".`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_POSTGRES_URL"))
	_ = vip.BindPFlag("postgres_url", flagset.Lookup("postgres-url"))
	_ = flagset.StringP("oauth2-github-client-id", "", vip.GetString("oauth2_github.client_id"), `Client ID for Login with GitHub.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_OAUTH2_GITHUB.CLIENT_ID"))
	_ = vip.BindPFlag("oauth2_github.client_id", flagset.Lookup("oauth2-github-client-id"))
	_ = flagset.StringP("oauth2-github-client-secret", "", vip.GetString("oauth2_github.client_secret"), `Client secret for Login with GitHub.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_OAUTH2_GITHUB.CLIENT_SECRET"))
	_ = vip.BindPFlag("oauth2_github.client_secret", flagset.Lookup("oauth2-github-client-secret"))
	_ = flagset.StringArrayP("oauth2-github-allowed-orgs", "", vip.GetStringSlice("oauth2_github.allowed_organizations"), `Organizations the user must be a member of to Login with GitHub.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_OAUTH2_GITHUB.ALLOWED_ORGANIZATIONS"))
	_ = vip.BindPFlag("oauth2_github.allowed_organizations", flagset.Lookup("oauth2-github-allowed-orgs"))
	_ = flagset.StringArrayP("oauth2-github-allowed-teams", "", vip.GetStringSlice("oauth2_github.allowed_teams"), `Teams inside organizations the user must be a member of to Login with GitHub. Structured as: <organization-name>/<team-slug>.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_OAUTH2_GITHUB.ALLOWED_TEAMS"))
	_ = vip.BindPFlag("oauth2_github.allowed_teams", flagset.Lookup("oauth2-github-allowed-teams"))
	_ = flagset.BoolP("oauth2-github-allow-signups", "", vip.GetBool("oauth2_github.allow_signups"), `Whether new users can sign up with GitHub.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_OAUTH2_GITHUB.ALLOW_SIGNUPS"))
	_ = vip.BindPFlag("oauth2_github.allow_signups", flagset.Lookup("oauth2-github-allow-signups"))
	_ = flagset.StringP("oauth2-github-enterprise-base-url", "", vip.GetString("oauth2_github.enterprise_base_url"), `Base URL of a GitHub Enterprise deployment to use for Login with GitHub.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_OAUTH2_GITHUB.ENTERPRISE_BASE_URL"))
	_ = vip.BindPFlag("oauth2_github.enterprise_base_url", flagset.Lookup("oauth2-github-enterprise-base-url"))
	_ = flagset.BoolP("oidc-allow-signups", "", vip.GetBool("oidc.allow_signups"), `Whether new users can sign up with OIDC.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_OIDC.ALLOW_SIGNUPS"))
	_ = vip.BindPFlag("oidc.allow_signups", flagset.Lookup("oidc-allow-signups"))
	_ = flagset.StringP("oidc-client-id", "", vip.GetString("oidc.client_id"), `Client ID to use for Login with OIDC.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_OIDC.CLIENT_ID"))
	_ = vip.BindPFlag("oidc.client_id", flagset.Lookup("oidc-client-id"))
	_ = flagset.StringP("oidc-client-secret", "", vip.GetString("oidc.cliet_secret"), `Client secret to use for Login with OIDC.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_OIDC.CLIET_SECRET"))
	_ = vip.BindPFlag("oidc.cliet_secret", flagset.Lookup("oidc-client-secret"))
	_ = flagset.StringP("oidc-email-domain", "", vip.GetString("oidc.email_domain"), `Email domain that clients logging in with OIDC must match.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_OIDC.EMAIL_DOMAIN"))
	_ = vip.BindPFlag("oidc.email_domain", flagset.Lookup("oidc-email-domain"))
	_ = flagset.StringP("oidc-issuer-url", "", vip.GetString("oidc.issuer_url"), `Issuer URL to use for Login with OIDC.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_OIDC.ISSUER_URL"))
	_ = vip.BindPFlag("oidc.issuer_url", flagset.Lookup("oidc-issuer-url"))
	_ = flagset.StringArrayP("oidc-scopes", "", vip.GetStringSlice("oidc.scopes"), `Scopes to grant when authenticating with OIDC.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_OIDC.SCOPES"))
	_ = vip.BindPFlag("oidc.scopes", flagset.Lookup("oidc-scopes"))
	_ = flagset.BoolP("telemetry", "", vip.GetBool("telemetry.enable"), `Whether telemetry is enabled or not. Coder collects anonymized usage data to help improve our product.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_TELEMETRY.ENABLE"))
	_ = vip.BindPFlag("telemetry.enable", flagset.Lookup("telemetry"))
	_ = flagset.BoolP("telemetry-trace", "", vip.GetBool("telemetry.trace_enable"), `Whether Opentelemetry traces are sent to Coder. Coder collects anonymized application tracing to help improve our product. Disabling telemetry also disables this option.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_TELEMETRY.TRACE_ENABLE"))
	_ = vip.BindPFlag("telemetry.trace_enable", flagset.Lookup("telemetry-trace"))
	_ = flagset.StringP("telemetry-url", "", vip.GetString("telemetry.url"), `URL to send telemetry.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_TELEMETRY.URL"))
	_ = vip.BindPFlag("telemetry.url", flagset.Lookup("telemetry-url"))
	_ = flagset.MarkHidden("telemetry-url")
	_ = flagset.BoolP("tls-enable", "", vip.GetBool("tls_config.tls_enable"), `Whether TLS will be enabled.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_TLS_CONFIG.TLS_ENABLE"))
	_ = vip.BindPFlag("tls_config.tls_enable", flagset.Lookup("tls-enable"))
	_ = flagset.StringArrayP("tls-cert-file", "", vip.GetStringSlice("tls_config.tls_cert_files"), `Path to each certificate for TLS. It requires a PEM-encoded file. To configure the listener to use a CA certificate, concatenate the primary certificate and the CA certificate together. The primary certificate should appear first in the combined file.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_TLS_CONFIG.TLS_CERT_FILES"))
	_ = vip.BindPFlag("tls_config.tls_cert_files", flagset.Lookup("tls-cert-file"))
	_ = flagset.StringP("tls-client-ca-file", "", vip.GetString("tls_config.tls_client_ca_file"), `PEM-encoded Certificate Authority file used for checking the authenticity of client`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_TLS_CONFIG.TLS_CLIENT_CA_FILE"))
	_ = vip.BindPFlag("tls_config.tls_client_ca_file", flagset.Lookup("tls-client-ca-file"))
	_ = flagset.StringP("tls-client-auth", "", vip.GetString("tls_config.tls_client_auth"), `Policy the server will follow for TLS Client Authentication. Accepted values are "none", "request", "require-any", "verify-if-given", or "require-and-verify".`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_TLS_CONFIG.TLS_CLIENT_AUTH"))
	_ = vip.BindPFlag("tls_config.tls_client_auth", flagset.Lookup("tls-client-auth"))
	_ = flagset.StringArrayP("tls-key-file", "", vip.GetStringSlice("tls_config.tls_key_tiles"), `Paths to the private keys for each of the certificates. It requires a PEM-encoded file.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_TLS_CONFIG.TLS_KEY_TILES"))
	_ = vip.BindPFlag("tls_config.tls_key_tiles", flagset.Lookup("tls-key-file"))
	_ = flagset.StringP("tls-min-version", "", vip.GetString("tls_config.tls_min_version"), `Minimum supported version of TLS. Accepted values are "tls10", "tls11", "tls12" or "tls13"`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_TLS_CONFIG.TLS_MIN_VERSION"))
	_ = vip.BindPFlag("tls_config.tls_min_version", flagset.Lookup("tls-min-version"))
	_ = flagset.BoolP("trace", "", vip.GetBool("trace_enable"), `Whether application tracing data is collected.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_TRACE_ENABLE"))
	_ = vip.BindPFlag("trace_enable", flagset.Lookup("trace"))
	_ = flagset.BoolP("secure-auth-cookie", "", vip.GetBool("secure_auth_cookie"), `Controls if the 'Secure' property is set on browser session cookies.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_SECURE_AUTH_COOKIE"))
	_ = vip.BindPFlag("secure_auth_cookie", flagset.Lookup("secure-auth-cookie"))
	_ = flagset.StringP("ssh-keygen-algorithm", "", vip.GetString("ssh_keygen_algorithm"), `The algorithm to use for generating ssh keys. Accepted values are "ed25519", "ecdsa", or "rsa4096".`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_SSH_KEYGEN_ALGORITHM"))
	_ = vip.BindPFlag("ssh_keygen_algorithm", flagset.Lookup("ssh-keygen-algorithm"))
	_ = flagset.StringArrayP("auto-import-template", "", vip.GetStringSlice("auto_import_templates"), `Templates to auto-import. Available auto-importable templates are: kubernetes`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_AUTO_IMPORT_TEMPLATES"))
	_ = vip.BindPFlag("auto_import_templates", flagset.Lookup("auto-import-template"))
	_ = flagset.MarkHidden("auto-import-template")
	_ = flagset.DurationP("metrics-cache-refresh-interval", "", vip.GetDuration("metrics_cache_refresh_interval"), `How frequently metrics are refreshed`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_METRICS_CACHE_REFRESH_INTERVAL"))
	_ = vip.BindPFlag("metrics_cache_refresh_interval", flagset.Lookup("metrics-cache-refresh-interval"))
	_ = flagset.MarkHidden("metrics-cache-refresh-interval")
	_ = flagset.DurationP("agent-stats-refresh-interval", "", vip.GetDuration("agent_stat_refresh_interval"), `How frequently agent stats are recorded`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_AGENT_STAT_REFRESH_INTERVAL"))
	_ = vip.BindPFlag("agent_stat_refresh_interval", flagset.Lookup("agent-stats-refresh-interval"))
	_ = flagset.MarkHidden("agent-stats-refresh-interval")
	_ = flagset.BoolP("verbose", "v", vip.GetBool("verbose"), `Enables verbose logging.`+"\n"+cliui.Styles.Placeholder.Render("Consumes $CODER_VERBOSE"))
	_ = vip.BindPFlag("verbose", flagset.Lookup("verbose"))
}

func AttachEnterpriseFlags(flagset *pflag.FlagSet, vip *viper.Viper) {
	_ = flagset.StringP("derp-server-relay-address", "", vip.GetString("derp.server.relay_address"), `An HTTP address that is accessible by other replicas to relay DERP traffic. Required for high availability.`)
	_ = vip.BindPFlag("derp.server.relay_address", flagset.Lookup("derp-server-relay-address"))
	_ = flagset.BoolP("audit-logging", "", vip.GetBool("audit_logging"), `Specifies whether audit logging is enabled.`)
	_ = vip.BindPFlag("audit_logging", flagset.Lookup("audit-logging"))
	_ = flagset.BoolP("browser-only", "", vip.GetBool("browser_only"), `Whether Coder only allows connections to workspaces via the browser.`)
	_ = vip.BindPFlag("browser_only", flagset.Lookup("browser-only"))
	_ = flagset.StringP("scim-auth-header", "", vip.GetString("scim_auth_header"), `Enables SCIM and sets the authentication header for the built-in SCIM server. New users are automatically created with OIDC authentication.`)
	_ = vip.BindPFlag("scim_auth_header", flagset.Lookup("scim-auth-header"))
	_ = flagset.IntP("user-workspace-quota", "", vip.GetInt("user_workspace_quota"), `Enables and sets a limit on how many workspaces each user can create.`)
	_ = vip.BindPFlag("user_workspace_quota", flagset.Lookup("user-workspace-quota"))
}

func defaultCacheDir() string {
	defaultCacheDir, err := os.UserCacheDir()
	if err != nil {
		defaultCacheDir = os.TempDir()
	}
	if dir := os.Getenv("CACHE_DIRECTORY"); dir != "" {
		// For compatibility with systemd.
		defaultCacheDir = dir
	}

	return filepath.Join(defaultCacheDir, "coder")
}

